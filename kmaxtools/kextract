#!/usr/bin/env python

import kextractor
import kextractor_4_12_8
import sys
import argparse

def get_srcarch(arch):
  srcarch = {
    "x86_64" : "x86",
    "i386" : "x86",
    "sparc64" : "sparc",
    "sparc" : "sparc",
    "sh64" : "sh",
    "sh" : "sh",
  }

  if arch in srcarch.keys():
    return srcarch[arch]
  else:
    return arch

if __name__ == '__main__':
  module_versions = [ "latest", "4.12.8" ]
  available_versions = "Available versions are %s." % (", ".join(module_versions))

  argparser = argparse.ArgumentParser()
  argparser.add_argument('--module',
                         type=str,
                         default="latest",
                         help="""Specify the version of the Kconfig parser to use.  Defaults to \"latest\".  %s.""" % (available_versions))
  argparser.add_argument("arch",
                         help="The architecture to extract Kconfig for.")
  argparser.add_argument("output",
                         help="The output file to write to.")
  argparser.add_argument('--version',
                         action="store_true",
                         help="""Print the version number.""")
  args = argparser.parse_args()

  if args.version:
    print("%s %s" % (kmaxtools.about.__title__, kmaxtools.about.__version__))
    exit(0)

  modver = args.module
  arch = args.arch
  output = args.output
  srcarch = get_srcarch(arch)

  if modver not in module_versions:
    sys.err.write("Invalid module version \"%s\".  %s." % (modver, available_versions))

  if modver == module_versions[0]:
    kextractor.kextract(output, "ARCH=%s" % (arch), "SRCARCH=%s" % (srcarch))
  elif modver == module_versions[1]:
    kextractor_4_12_8.kextract(output, "ARCH=%s" % (arch), "SRCARCH=%s" % (srcarch))
  else:
    assert(False)
