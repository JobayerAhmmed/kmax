#!/usr/bin/env python
import sys
import argparse
import z3
import regex
import pickle

def get_kclause_constraints(file):  
  with open(file, 'r') as fp:
    kclause = pickle.load(fp)

    kclause_constraints = {}
    for var in kclause.keys():
      kclause_constraints[var] = [ z3.parse_smt2_string(clause) for clause in kclause[var] ]
    kclause = None
    return kclause_constraints

def get_kmax_constraints(file):
  with open(file, 'r') as fp:
    kmax = pickle.load(fp)
    # todo: support multiple compilation units

    if not args.compilation_unit:
      info("no compilation unit given.  generating .config according to kconfig specs only.")
    elif args.compilation_unit not in kmax.keys():
      raise Exception("%s not found in %s.  please check the compilation unit against the kmax file" % (args.compilation_unit, args.kmax_file))

    kmax_constraints = []
    if args.compilation_unit in kmax.keys():
      # add the condition for the compilation unit and each of its parent directories
      kmax_constraints.append(z3.parse_smt2_string(kmax[args.compilation_unit]))
      subpath, basename = args.compilation_unit.rsplit('/', 1)
      elems = subpath.rsplit('/')
      for i in reversed(range(0, len(elems))):
        subarray = elems[0:(len(elems) - i)]
        subsubpath = '/'.join(subarray) + "/"
        if subsubpath in kmax.keys():
          kmax_constraints.append(z3.parse_smt2_string(kmax[subsubpath]))
        else:
          sys.stderr.write("%s not found in %s.  assuming it's always included.\n" % (subsubpath, args.kmax_file))
    kmax = None
    return kmax_constraints

if __name__ == '__main__':    

  def info(msg, ending="\n"):
    sys.stderr.write("%s%s" % (msg, ending))

  argparser = argparse.ArgumentParser()
  argparser.add_argument('--kmax-file',
                         type=str,
                         default="kbuild.kmax",
                         help="""The file containing the Kbuild constraints as a pickled dictionary from compilation unit or subdirectory to constraints in smtlib2 format.  Defaults to \"kmax\".""")
  argparser.add_argument('--kclause-file',
                         type=str,
                         default="kconfig.kclause",
                         help="""The file containing the Kconfig constraints as a pickled dictionary from configuration option to constraints in smtlib2 format.  Defaults to \"kclause\".""")
  argparser.add_argument('--optimize',
                         type=str,
                         help="""An existing .config file to use to try to match as closely as possible while still containing the desired objective.""")
  argparser.add_argument('--show-core',
                         action="store_true",
                         help="""Show the unsatisfiable core if the formula is unsatisfiable.""")
  argparser.add_argument('-D',
                         '--define',
                         action="append",
                         default=[],
                         help="""Manually set a configuration option to be enabled.""")
  argparser.add_argument('-U',
                         '--undefine',
                         action="append",
                         default=[],
                         help="""Manually set a configuration option to be disabled.""")
  argparser.add_argument("compilation_unit", nargs='?', help="The path of the compilation unit (.o file) to generate a .config for, relative to the top of the source tree.")
  args = argparser.parse_args()

  kmax_constraints = get_kmax_constraints(args.kmax_file)

  kclause_constraints = get_kclause_constraints(args.kclause_file)

  solver = z3.Solver()
  if args.optimize or args.show_core: solver.set(unsat_core=True)

  # add kmax constraints
  for constraint in kmax_constraints:
    solver.add(constraint)

  # add user-specified constraints
  for define in args.define:
    solver.add(z3.Bool(define))
  for undefine in args.undefine:
    solver.add(z3.Not(z3.Bool(undefine)))
  
  # add kclause constraints
  for var in kclause_constraints.keys():
    for z3_clause in kclause_constraints[var]:
      solver.add(z3_clause)

  # solve
  result = solver.check()
  if (result == z3.sat):
    model = None
    if not args.optimize:
      info("satisfiable. generating config file")
      # find any solution
      model = solver.model()
      # constraints = [ ("" if model[entry] else "!") + str(entry) for entry in model ]
      # for constraint in constraints:
      #   print(constraint)
    else:
      info("satisfiable. attempting to optimize.")
      # try to match the given .config file as much as possible.
      # there are two approaches to try: (1) add the .config has
      # constraints, get the unsat core and try to remove assumptions
      # until we get something sat, (2) add the .config has soft
      # assertions.

      # todo: don't allow invisible defaults to be turned off (get them from kclause), reduces size of assumptions

      on_pattern = regex.compile("^(CONFIG_[A-Za-z0-9_]+)=[ym]")
      off_pattern = regex.compile("^# (CONFIG_[A-Za-z0-9_]+) is not set")
      assumptions = []
      # add the .config as assumptions
      with open(args.optimize, 'r') as optimize_fp:
        lines = optimize_fp.readlines()
        for line in lines:
          line = line.strip()
          off = off_pattern.match(line)
          if off:
            assumption = z3.Not(z3.Bool(off.group(1)))
            assumptions.append(assumption)
          else:
            on = on_pattern.match(line)
            if on:
              assumption = z3.Bool(on.group(1))
              assumptions.append(assumption)
          
        
      # (1) unsat core approach. keep removing assumptions until the formula is satisfiable
      res = solver.check(assumptions)
      if res == z3.sat:
        info("no optimization needed")
      else:
        info("optimizing via unsat core approach.")
        info("%d assumptions left to try removing." % (len(assumptions)), ending="\r")
        while res == z3.unsat:
          core = solver.unsat_core()
          # remove all assumptions that in the core.  todo, try randomizing this or removing only some assumptions each iteration.
          assumptions = [ assumption for assumption in assumptions if assumption not in core ]
          info(len(assumptions), ending="\r")
          res = solver.check(assumptions)
          core = solver.unsat_core()
          res = solver.check(assumptions)
        info("")
        info("found satisfying config")
      model = solver.model()
      
      # (2) soft assertion approach. (todo)

    # end else for if not args.optimize

    # print the model in .config format
    token_pattern = regex.compile("CONFIG_[A-Za-z0-9_]+")
    for entry in model:
      str_entry = str(entry)
      matches = token_pattern.match(str_entry)
      if matches:
        if model[entry]:
          # print("%s" % (str_entry))
          print("%s=y" % (str_entry))
        else:
          # print("!%s" % (str_entry))
          print("# %s is not set" % (str_entry))
          
  else:
    # todo: better reporting to the user
    sys.stderr.write("error: unsatisfiable.  no config generated\n")
    # todo: need to add assumptions to checker in order to get a core.  try using a separate formula for each configuration option
    if args.show_core:
       info("unsat_core: %s" % (str(solver.unsat_core())))
    exit(1)

  # g = Glucose3()
  # g.add_clause([-1, 2])
  # g.add_clause([-2, 3])
  # print(g.solve())
  # print(g.get_model())

