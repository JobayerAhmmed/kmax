#!/usr/bin/env python

from kmaxtools.localize import *

if __name__ == '__main__':    
  argparser = argparse.ArgumentParser()
  argparser.add_argument('--kmax-file',
                         type=str,
                         default="kbuild.kmax",
                         help="""The file containing the Kbuild constraints as a pickled dictionary from compilation unit or subdirectory to constraints in smtlib2 format.  Defaults to \"kbuild.kmax\".""")
  argparser.add_argument('--kclause-file',
                         type=str,
                         default="kconfig.kclause",
                         help="""The file containing the Kconfig constraints as a pickled dictionary from configuration option to constraints in smtlib2 format.  Defaults to \"kconfig.kclause\".""")
  argparser.add_argument('--constraints-file',
                         type=str,
                         help="""A text file containing ad-hoc constraints.  One configuration option name per line.  Prefix with ! to force it off; no prefix means force on.""")
  argparser.add_argument('--optimize',
                         type=str,
                         help="""An existing .config file to use to try to match as closely as possible while still containing the desired objective.""")
  argparser.add_argument('-u',
                         '--show-unsat-core',
                         action="store_true",
                         help="""Show the unsatisfiable core if the formula is unsatisfiable.""")
  argparser.add_argument('-D',
                         '--define',
                         action="append",
                         default=[],
                         help="""Manually set a configuration option to be enabled.""")
  argparser.add_argument('-U',
                         '--undefine',
                         action="append",
                         default=[],
                         help="""Manually set a configuration option to be disabled.""")
  argparser.add_argument("compilation_unit", nargs='?', help="The path of the compilation unit (.o file) to generate a .config for, relative to the top of the source tree.")
  args = argparser.parse_args()

  compilation_unit = args.compilation_unit
  kmax_file = args.kmax_file
  kclause_file = args.kclause_file
  constraints_file = args.constraints_file
  define = args.define
  undefine = args.undefine
  show_unsat_core = args.show_unsat_core
  optimize = args.optimize

  if not os.path.isfile(kmax_file) or not os.path.isfile(kclause_file):
    if not os.path.isfile(kclause_file):
      error("Cannot find kclause formulas file: %s" % (kclause_file))
    if not os.path.isfile(kmax_file):
      error("Cannot find kmax formulas file: %s" % (kmax_file))
    info("Download formulas from https://opentheblackbox.com/kmaxspecs/ or follow the README.md to generate them with kclause and kmax.\n")
    exit(1)

  constraints = get_constraints(kclause_file, kmax_file, compilation_unit, constraints_file, define, undefine)
  
  model = klocalize(constraints, show_unsat_core)

  if model is not None and optimize:
    model = optimize_model(optimize, constraints)

  print_model_as_config(model)
